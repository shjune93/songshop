package com.songsite.web;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.songsite.domain.CategoryBoard;

import com.songsite.domain.User;
import com.songsite.fileservice.FileUploadDownloadService;
import com.songsite.message.Result;

import com.songsite.repository.CategoryBoardRepository;
import com.songsite.session.HttpSessionUtils;

public class CategoryBoardController {
	

	@Autowired
	private CategoryBoardRepository CategoryBoardRepository;
	


	private Result valid(HttpSession session,CategoryBoard CategoryBoard) {
		if(!HttpSessionUtils.isLoginUser(session)) {

			return Result.fail("로그인이 필요합니다.");
			//throw new IllegalStateException("로그인이 필요합니다.");
		}
		User loginUser=HttpSessionUtils.getUserSession(session);
		if(!CategoryBoard.isSameWriter(loginUser)) {
			return Result.fail("자신이 쓴 글만 수정,삭제 가능합니다.");
			//throw new IllegalStateException("자신이 쓴 글만 수정,삭제 가능합니다.");
		}
		return Result.ok();

	}

	//리스트 보기
	@GetMapping("list/{curPage}")
	public String list(
			Model model,
			@PathVariable int curPage,
			@RequestParam(required = false) String keyword,
			@RequestParam(required = false) String contents
			) {
		//model.addAttribute("CategoryBoards",CategoryBoardRepository.findAll());
		List<CategoryBoard> CategoryBoardList;
		 if (keyword != null) {
			 CategoryBoardList= CategoryBoardRepository.findByTitleContaining(keyword);
	        } else if (contents != null) {
	        	CategoryBoardList= CategoryBoardRepository.findByContentsContaining(contents);
	        }else {
	        	CategoryBoardList=CategoryBoardRepository.findAll();
	        	model.addAttribute("Null","null");
	        }
		//List<CategoryBoard> CategoryBoardList=CategoryBoardRepository.findAll();
		int listCnt=CategoryBoardList.size();
		
		CategoryBoard[] arrayCategoryBoard=CategoryBoardList.toArray(new CategoryBoard[listCnt]);
		Arrays.sort(arrayCategoryBoard);
		//System.out.println(arrayCategoryBoard.length);
		
		List tmpArrayList = new ArrayList<CategoryBoard>();
		int pageRange=(curPage-1)/10; //현재 페이지 범위
		for(int i=(curPage-1)*10;i<(curPage-1)*10+10;i++) {//현재 페이지에 해당하는 글담기
			if(i==arrayCategoryBoard.length)break;
			tmpArrayList.add(arrayCategoryBoard[i]);
			//System.out.println(arrayList[i]);
			
			
		}
		List beforePageNum=new ArrayList<Integer>();
		List curPageNum=new ArrayList<Integer>();
		List nextPageNum=new ArrayList<Integer>();
		int next=0;
		int before=0;
		if(pageRange!=0) {
			before=(pageRange-1)*10+10;
			model.addAttribute("before",before);
		}
		for(int i=1;i<=10;i++) {//현재페이지에 해당하는 페이지 범위 표시
			//페이지숫자
			if(pageRange*10+i>listCnt/10+1)break; //페이지 끝일경우
			//pageNum.add(new PageNum(pageRange*10+i));
			if(curPage>pageRange*10+i) {
				beforePageNum.add(pageRange*10+i);
			}else if(curPage<pageRange*10+i) {
				nextPageNum.add(pageRange*10+i);
			}else {
				curPageNum.add(pageRange*10+i);
			}
			//pageNum.add(pageRange*10+i); 페이지 추가
			if(i==10) {//next표시여부
				next=(pageRange+1)*10+1;
				model.addAttribute("next",next);
			}
		}
		model.addAttribute("keyword",keyword);
		model.addAttribute("beforePageNum",beforePageNum);
		model.addAttribute("curPageNum",curPageNum);
		model.addAttribute("nextPageNum",nextPageNum);
		//model.addAttribute("page",pageNum); //전체 페이지 넘겨주기
		model.addAttribute("CategoryBoards",tmpArrayList);
//		
		return "/CategoryBoard/list";
	}


	//상세내용 보기
	@GetMapping("{listNum}/{id}")//@RequestParam("errorMessage") String errorMessage 리다이렉트 받는부분
	public String show(
			HttpSession session,
			@PathVariable Long id,
			@PathVariable int listNum,
			@RequestParam(required = false) String keyword,
			Model model) {
		CategoryBoard CategoryBoard=CategoryBoardRepository.findById(id).get();
		Result result=valid(session,CategoryBoard);
		//System.out.println("null");
		if(!result.isValid()) {
			//인증안될시 알림창 띄움
			model.addAttribute("showupdatedelete","show"); //수정/삭제 생성여부 결정
			
		}
	
	
		model.addAttribute("keyword",keyword);
		model.addAttribute("listNum",listNum);
		model.addAttribute("CategoryBoard",CategoryBoard);
		return "/CategoryBoard/show";
	}


	//#로그인 확인후 게시판 적기 이동
	@GetMapping("form")
	public String loginForm(HttpSession session, HttpServletRequest request) {
		if (session.getAttribute(HttpSessionUtils.User_SESSION_KEY) == null) {
			// 이미 로그인 상태일 경우
			return "redirect:/login";
		}
		return "/CategoryBoard/form";
	}


	//게시판 수정 폼으로 이동
	@PostMapping("{id}/updateform")
	public String updateForm(HttpSession session,HttpServletResponse response,@PathVariable Long id,Model model){

		CategoryBoard CategoryBoard=CategoryBoardRepository.findById(id).get();
		Result result=valid(session,CategoryBoard);
		if(!result.isValid()) {
			//인증안될시 알림창 띄움
			model.addAttribute("errorMessage",result.getErrorMessage()); //알림창에 뜰 메세지 저장 리다이렉트 되는곳으로 전달
			//model.addAttribute("CategoryBoard",CategoryBoard);
//			response.setContentType("text/html; charset=UTF-8");
//			PrintWriter out = response.getWriter();
//			out.println("<script>alert("+result.getErrorMessage()+");location.href='/CategoryBoard/"+id+"';</script>");
//			out.flush();
			return "redirect:/CategoryBoard/"+id;
			//return "";
			
		}
	
		model.addAttribute("CategoryBoard",CategoryBoard);
		return "/CategoryBoard/updateForm";
	}
	//redirect는 주소로 없으면 templates 폴더의 html파일로

	//게시판 수정
	@PostMapping("{id}/update")
	public String update(HttpSession session,@PathVariable Long id,String title,String contents,@RequestParam("file") MultipartFile file,Model model) {

		CategoryBoard CategoryBoard=CategoryBoardRepository.findById(id).get();
		Result result=valid(session,CategoryBoard);
		if(!result.isValid()) {
			model.addAttribute("errorMessage",result.getErrorMessage());
			return "redirect:/CategoryBoard/"+id;
		}

		CategoryBoard.update(title,contents);
		CategoryBoardRepository.save(CategoryBoard);
		if(!file.isEmpty()) {
			if(CategoryBoard.getFile()!=null) {
				String path="C:\\Users\\shjun\\git\\songshop\\song-shop\\files\\"+CategoryBoard.getId().toString()+"\\"+CategoryBoard.getFile().getFileName();
				System.out.println("파일경로"+path);
				File beforeFile= new File(path);
				if(beforeFile.exists()==true) {

					beforeFile.delete();
					System.out.println(path+"삭제 완료");
				}
				CategoryBoardFileRepository.deleteById(CategoryBoard.getFile().getId());
				//CategoryBoardFileRepository.deleteById(id);
			}
			
			String i=id.toString();
			String fileName = service.storeFile(file,i);


			String fileDownloadUri = ServletUriComponentsBuilder.fromCurrentContextPath()
					.path("/CategoryBoard/downloadFile/")	
					.path(i+"/")
					.path(fileName)
					.toUriString();

			CategoryBoardFile CategoryBoardFile=new CategoryBoardFile(fileName, fileDownloadUri, file.getContentType(), file.getSize(),CategoryBoard);
			CategoryBoardFileRepository.save(CategoryBoardFile);

		}
		return "redirect:/CategoryBoard/"+id;
	}

	//게시판 삭제
	@PostMapping("{id}/delete")
	public String delete(HttpSession session,HttpServletRequest request,@PathVariable Long id,Model model){

		CategoryBoard CategoryBoard=CategoryBoardRepository.findById(id).get();
		Result result=valid(session,CategoryBoard);
		if(!result.isValid()) {
			model.addAttribute("errorMessage",result.getErrorMessage());
			return "redirect:/CategoryBoard/"+id;
		}
		if(CategoryBoard.getFile()!=null) {
			//파일경로 하드코딩
			String path="C:\\Users\\shjun\\git\\songshop\\song-shop\\files\\"+CategoryBoard.getId().toString()+"\\"+CategoryBoard.getFile().getFileName();
			//
			System.out.println("파일경로"+path);
			File file= new File(path);
			if(file.exists()==true) {
				System.out.println("여기 들어옴");
				file.delete();
			}
			CategoryBoardFileRepository.deleteById(CategoryBoard.getFile().getId());
		}


		CategoryBoardRepository.deleteById(id);
		return "redirect:/CategoryBoard/list";
	}


	//게시판등록
	@PostMapping("create")
	public String create(String title,String contents,@RequestParam("file") MultipartFile file,HttpSession session){
		if(!HttpSessionUtils.isLoginUser(session)) {
			return "/login";
		}


		User sessionUser=HttpSessionUtils.getUserSession(session);
		CategoryBoard CategoryBoard=new CategoryBoard(sessionUser,title,contents);

		CategoryBoard savedCategoryBoard=CategoryBoardRepository.save(CategoryBoard);
		//파일 저장 파일 db저장
		if(!file.isEmpty()) {
			String i=savedCategoryBoard.getId().toString();
			String fileName = service.storeFile(file,i);
			System.out.println("파일 이름 "+fileName);


			String fileDownloadUri = ServletUriComponentsBuilder.fromCurrentContextPath()
					.path("/CategoryBoard/downloadFile/")	
					.path(i+"/")
					.path(fileName)
					.toUriString();

			CategoryBoardFile CategoryBoardFile=new CategoryBoardFile(fileName, fileDownloadUri, file.getContentType(), file.getSize(),savedCategoryBoard);
			CategoryBoardFileRepository.save(CategoryBoardFile);



		}
		return "redirect:/CategoryBoard/list/1";
	}
}
